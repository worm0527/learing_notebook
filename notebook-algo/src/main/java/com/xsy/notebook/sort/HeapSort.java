package com.xsy.notebook.sort;

import com.xsy.notebook.array.Array;

import java.util.Arrays;

/**
 * <table>
 *     <thead>
 *         <tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"  ><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1061" >排序算法</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1062" >平均时间复杂度</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1063" >最好</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1064" >最坏</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;word-break: break-all;" data-evernote-id="1065" >空间复杂度</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1066" >稳定性</th></tr>
 *     </thead>
 *     <tbody style="border-width: 0px;border-style: initial;border-color: initial;" ><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;" data-evernote-id="1068" ><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;"  >冒泡排序</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1070" >O(n^2)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1071" >O(n)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1072" >O(n^2)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;"  >O(1)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1074" >稳定</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);" data-evernote-id="1075" ><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1076" >快速排序</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1077" >O(nlogn)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1078" >O(nlogn)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1079" >O(n^2)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1080" >O(logn)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1081" >不稳定</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;" data-evernote-id="1082" ><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1083" >插入排序</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1084" >O(n^2)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1085" >O(n)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1086" >O(n^2)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1087" >O(1)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1088" >稳定</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);" data-evernote-id="1089" ><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1090" >希尔排序</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1091" >O(n^1.3)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1092" >O(n)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1093" >O(nlog2n)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1094" >O(1)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1095" >不稳定</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;" data-evernote-id="1096" ><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1097" >选择排序</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1098" >O(n^2)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1099" >O(n^2)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1100" >O(n^2)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1101" >O(1)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1102" >不稳定</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);" data-evernote-id="1103" ><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1104" >堆排序</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1105" >O(nlogn)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1106" >O(nlogn)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1107" >O(nlogn)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1108" >O(1)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1109" >不稳定</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;" data-evernote-id="1110" ><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1111" >归并排序</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1112" >O(nlogn)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1113" >O(nlogn)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1114" >O(nlogn)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1115" >O(n)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1116" >稳定</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);" data-evernote-id="1117" ><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1118" >桶排序</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1119" >O(n+k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1120" >O(n+k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1121" >O(n+k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1122" >O(n+k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1123" >稳定</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;" data-evernote-id="1124" ><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1125" >计数排序</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1126" >O(n+k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1127" >O(n+k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1128" >O(n+k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1129" >O(k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1130" >稳定</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);" data-evernote-id="1131" ><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1132" >基数排序</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1133" >O(n*k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1134" >O(n*k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1135" >O(n*k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" data-evernote-id="1136" >O(n+k)</td><td style="border-color: rgb(204, 204, 204);font-size: 14px;color: rgb(89, 89, 89);min-width: 85px;" >稳定</td></tr></tbody>
 * </table>
 */
public class HeapSort {

    public static void main(String[] args) {
        int[] array = {2, 0, -2, 6, 8, 11, 1, 23, 15, 7, -14, 1};
        heapSort(array);
    }

    public static void heapSort(int[] array) {
        System.out.println("建堆前：" + Arrays.toString(array));
        creatHeap(array);
        System.out.println("建堆后：" + Arrays.toString(array));
        int[] tempArr = new int[array.length];
        for (int i = 0; i < array.length; i++) {
            tempArr[i] = array[0];
            array[0] = array[array.length - i - 1];
            shiftDown(array, 0, array.length - i);
        }
        System.arraycopy(tempArr, 0, array, 0, tempArr.length);
        System.out.println("排序后：" + Arrays.toString(array));
    }

    //将数组创建成堆
    public static void creatHeap(int arr[]) {
        for (int i = arr.length / 2; i >= 0; i--) {
            shiftDown(arr, i, arr.length);
        }
    }

    public static void shiftDown(int[] array, int index, int len) {

        int leftChild = index * 2 + 1; // 左子节点
        int rightChild = index * 2 + 2; // 右子节点
        if (leftChild >= len) {
            return;
        }

        if (rightChild < len
                && array[rightChild] < array[index]
                && array[rightChild] < array[leftChild]) {
            swap(array, rightChild, index);
            shiftDown(array, rightChild, len);
        } else if (array[leftChild] < array[index]) {
            swap(array, leftChild, index);
            shiftDown(array, leftChild, len);
        }

    }

    public static void swap(int[] array, int indexA, int indexB) {
        int temp = array[indexA];
        array[indexA] = array[indexB];
        array[indexB] = temp;
    }

}
